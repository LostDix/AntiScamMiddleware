import logging
from collections import defaultdict
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Update, Message
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


WARNING_TEXT = """
‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! –£—á–∞—Å—Ç–∏–ª–∏—Å—å —Å–ª—É—á–∞–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞!</b>

–î–æ—Ä–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –±—É–¥—å—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω—ã! –í –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –æ–±–º–∞–Ω–∞.
üîπ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ–∑–Ω–∞–∫–æ–º—ã–º –ª—é–¥—è–º!
üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã.
üîπ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–µ –¥–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º.

–ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è –∏ —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã!
"""

class AntiScamMiddleware(BaseMiddleware):
    def __init__(self, bot):
        self.bot = bot
        self.last_warning_time = {}  # {chat_id: last_warning_datetime}
        self.message_counters = defaultdict(int)  # {chat_id: message_count}
        super().__init__()
        logger.info("Initialized AntiScamMiddleware")

    async def __call__(
            self,
            handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
            event: Update,
            data: Dict[str, Any]
    ) -> Any:
        try:
            message = event.message or event.edited_message
            if not message:
                return await handler(event, data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
            if not self._is_valid_chat_type(message):
                return await handler(event, data)

            if self._is_service_message(message):
                return await handler(event, data)

            chat_id = message.chat.id

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.message_counters[chat_id] += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞
            if not message.reply_to_message and await self._check_general_warning(message):
                await self._send_warning(message)
                self.last_warning_time[chat_id] = datetime.now()
                self.message_counters[chat_id] = 0

            return await handler(event, data)

        except Exception as e:
            logger.exception(f"Error in AntiScamMiddleware: {e}")
            return await handler(event, data)

    def _is_valid_chat_type(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ —á–∞—Ç–∞"""
        chat_type = message.chat.type
        # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
        return chat_type in ["group", "supergroup"]

    async def _check_general_warning(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç"""
        chat_id = message.chat.id

        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if chat_id not in self.last_warning_time:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (3 —á–∞—Å–∞)
        if (datetime.now() - self.last_warning_time[chat_id]) < timedelta(hours=3):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (50+)
        return self.message_counters[chat_id] >= 50

    async def _send_warning(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç"""
        try:
            await self.bot.send_message(
                chat_id=message.chat.id,
                text=WARNING_TEXT,
                parse_mode="HTML"
            )
            logger.info(f"Sent scam warning to chat {message.chat.id}")
        except Exception as e:
            logger.error(f"Failed to send warning message: {e}")

    def _is_service_message(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return (not message.from_user or
                message.from_user.id == 777000 or
                message.new_chat_members or
                message.left_chat_member or
                message.pinned_message)